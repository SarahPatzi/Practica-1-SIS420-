# -*- coding: utf-8 -*-
"""Practica1-SegundaForma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zjxPtVVmuJESOkTxOWpsRYVcpKlEcWGh

# **Segunda Forma: Regresión Polinómica**

Importamos las librerias:
"""

import random #Genera numeros aleatorios
import numpy as np #Nos ayuda a trabajar con numeros y hacer calculos
import pandas as pd #Nos ayuda a trabajar con datos en forma de tablas
import matplotlib.pyplot as plt #Grafica los datos
from sklearn.linear_model import LinearRegression #Crea modelos de predicción (en este caso, una linea que se ajusta a los datos)
from sklearn.preprocessing import PolynomialFeatures #Nos ayuda a transformar los datos
from sklearn.metrics import mean_squared_error #Nos ayuda a evaluar el modelo

"""Función para generar pesos en base a la altura: Si alguien es más bajo su peso será menor y si es más alto su peso será mayor"""

def generar_peso(altura):
    if altura < 1.4:
        return random.randint(40, 60)
    elif altura < 1.6:
        return random.randint(50, 70)
    elif altura < 1.8:
        return random.randint(60, 85)
    else:
        return random.randint(70, 100)

"""Generando datos de estatura y peso:"""

#FORMA LARGA:
alturas = []  # Creamos una lista vacía

for _ in range(100): #el _ en el for es para evitar crear una variable que no usaremos, solo lo necesitamos como una variable de marcador de posición
    altura = round(random.uniform(1.3, 2.0), 2)  # Generamos una altura aleatoria
    alturas.append(altura)  # Añadimos la altura a la lista

pesos = []  # Creamos una lista vacía para almacenar los pesos
for a in alturas:
    peso = generar_peso(a)  # Llamamos a la función para obtener el peso para la altura a
    pesos.append(peso)  # Agregamos el peso a la lista de pesos

#FORMA RESUMIDA:
#alturas = [round(random.uniform(1.3, 2.0), 2) for _ in range(100)]  # Llena la lista alturas con 100 números aleatorios entre 1.3 y 2.0, redondeados a 2 decimales.
#pesos = [generar_peso(a) for a in alturas]  # LLena la lista llamando a la función generar_peso una vez por cada elemento en la lista alturas

"""Para crear una tabla con los datos de altura y peso: Toma un diccionario como argumento, donde las claves se usan como nombres de las columnas y los valores se usan como datos de esas columnas"""

# 'nombre': datos(los anteriormente generados)
tabla = pd.DataFrame({
    'Altura (m)': alturas,
    'Peso (kg)': pesos
})

"""Guardar, cargar y mostrar los datos:"""

tabla.to_csv('TablaDeDatos.csv', index=False) #Guarda
tabla = pd.read_csv('TablaDeDatos.csv') #Carga
print("Datos cargados desde el archivo CSV:")
tabla.head(10) #Muestra

"""Grafica de los datos sin el ajuste de curva:"""

plt.scatter(tabla['Altura (m)'], tabla['Peso (kg)'], color='#9f33ff') #(X,Y,Color)
plt.title('Altura vs Peso') #titulo
plt.xlabel('Altura (m)') #eje x nombre
plt.ylabel('Peso (kg)') #eje y nombre
plt.show()  # Muestra la gráfica

"""Preparando los datos para la curva polinómica:"""

X = tabla['Altura (m)'].values.reshape(-1, 1) #lista de alturas que convertimos en un array de numpy con una sola columna
y = tabla['Peso (kg)'].values #lista de pesos
poly = PolynomialFeatures(degree=2) #grado del polinomio, ajustar una curva a los datos en lugar de solo una línea recta.
X_poly = poly.fit_transform(X) #le damos al modelo para que pueda ajustar una curva a los datos

"""Crear, entrenar y hacer predicciones:"""

model = LinearRegression() #crear un modelo de regresión lineal
model.fit(X_poly, y)  #entrenar el modelo con los datos transformados
y_pred = model.predict(X_poly)  #hacer predicciones con los datos transformados

"""Evaluación del modelo calculando el error cuadratico medio:"""

mse = mean_squared_error(y, y_pred) #calcula el error cuadratico medio
print(f"Error cuadratico medio: {mse:.2f}")  #imprime el error cuadratico medio con dos decimales

"""Graficar con el ajuste:"""

plt.scatter(tabla['Altura (m)'], tabla['Peso (kg)'], color='#9f33ff', label='Datos')
plt.plot(tabla['Altura (m)'], y_pred, color='#ff338d', label='Curva ajustada')
plt.title('Curva ajustada Altura vs Peso')
plt.xlabel('Altura')
plt.ylabel('Peso')
plt.legend()
plt.show()